name: "AWS ECS Task Deploy"
description: "Deploy production image to AWS ECS"
inputs:
  environment:
    description: Deployment environment
    required: true
  ecr_repository:
    description: ECR repository to pull image from
    required: true
  deployment_tag:
    description: Github Action deployment tag
    required: true
  run_preflight:
    description: Determines whether the preflight step should be triggered
    required: true
  desired_count:
    description: Number of tasks running in ECS service
    required: false
    default: 2

  aws_access_key_id:
    description: AWS access key
    required: true
  aws_secret_access_key:
    description: AWS secret access key
    required: true
  aws_region:
    description: AWS region
    required: true

runs:
  using: "composite"

  steps:
    - uses: actions/checkout@v4

    - id: configure-aws-credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}

    - id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Setup Python + Poetry
      uses: moneymeets/action-setup-python-poetry@master
      with:
        working_directory: ${{ github.action_path }}
        with_checks: 'false'
        # ToDo: Re-enable cache when https://github.com/actions/setup-python/issues/361 is fixed
        poetry_cache_enabled: 'false'

    - id: get-image-uri
      uses: moneymeets/action-ecs-deploy/custom-deploy-steps/get-image-uri@master
      with:
        ecr_repository: ${{ inputs.ecr_repository }}
        aws_region: ${{ inputs.aws_region }}

    - name: Render and deploy local-exec task definition to Amazon ECS
      id: deploy-local-task-definition
      uses: moneymeets/action-ecs-deploy/custom-deploy-steps/create-task-definition@master
      with:
        working_directory: ${{ github.action_path }}
        application_id: ${{ inputs.ecr_repository }}-local-exec-${{ inputs.environment }}
        image_uri: ${{ steps.get-image-uri.outputs.image-uri }}
        deployment_tag: ${{ inputs.deployment_tag }}
        aws_access_key_id: ${{ inputs.aws_access_key_id }}
        aws_secret_access_key: ${{ inputs.aws_secret_access_key }}
        aws_region: ${{ inputs.aws_region }}

    - name: Render and deploy task definition to Amazon ECS
      id: deploy-production-task-definition
      uses: moneymeets/action-ecs-deploy/custom-deploy-steps/create-task-definition@master
      with:
        working_directory: ${{ github.action_path }}
        application_id: ${{ inputs.ecr_repository }}-${{ inputs.environment }}
        image_uri: ${{ steps.get-image-uri.outputs.image-uri }}
        deployment_tag: ${{ inputs.deployment_tag }}
        aws_access_key_id: ${{ inputs.aws_access_key_id }}
        aws_secret_access_key: ${{ inputs.aws_secret_access_key }}
        aws_region: ${{ inputs.aws_region }}

    - name: Deploy task definition and run preflight
      id: deploy-preflight-task-definition-and-run-task
      if: ${{ inputs.run_preflight == 'true' }}
      uses: moneymeets/action-ecs-deploy/custom-deploy-steps/run-preflight@master
      with:
        working_directory: ${{ github.action_path }}
        ecr_repository: ${{ inputs.ecr_repository }}
        environment: ${{ inputs.environment }}
        image_uri: ${{ steps.get-image-uri.outputs.image-uri }}
        deployment_tag: ${{ inputs.deployment_tag }}
        aws_access_key_id: ${{ inputs.aws_access_key_id }}
        aws_secret_access_key: ${{ inputs.aws_secret_access_key }}
        aws_region: ${{ inputs.aws_region }}

    # Service is managed by Pulumi, only desired count and task definition should be updated here
    - name: Update service
      shell: bash
      run: |
        aws ecs update-service \
          --task-definition "${{ steps.deploy-production-task-definition.outputs.latest-task-definition-arn }}" \
          --desired-count ${{ inputs.desired_count }} \
          --cluster ${{ inputs.environment }} \
          --service ${{ inputs.ecr_repository }}-${{ inputs.environment }}

    - name: Wait for service stability
      shell: bash
      id: check-service-stability
      working-directory: ${{ github.action_path }}
      run: |
        poetry run actions_helper wait-for-service-stability \
          --cluster ${{ inputs.environment }} \
          --service ${{ inputs.ecr_repository }}-${{ inputs.environment }}

    - name: Determine which pair of task definitions should be deregistered
      if: always()
      shell: bash
      id: determine-task-definitions-to-deregister
      env:
        PREVIOUS_PRODUCTION_TASK_DEFINITION: ${{ steps.deploy-production-task-definition.outputs.previous-task-definition-arn }}
        LATEST_PRODUCTION_TASK_DEFINITION: ${{ steps.deploy-production-task-definition.outputs.latest-task-definition-arn }}
      run: |
        PRIMARY_DEPLOYMENT_DEFINITION_ARN=$(
          aws ecs describe-services \
            --cluster ${{ inputs.environment }} \
            --services ${{ inputs.ecr_repository }}-${{ inputs.environment }} \
            | jq -r '.services[].deployments[] | select(.status == "PRIMARY") | .taskDefinition'
        )
        
        if [[ "$PRIMARY_DEPLOYMENT_DEFINITION_ARN" == "$LATEST_PRODUCTION_TASK_DEFINITION" ]]; then  
              # Do not deregister task definition for initial deployment
              if [ ! -z "$PREVIOUS_PRODUCTION_TASK_DEFINITION" ]; then   
                echo "TASK_DEFINITION_PRODUCTION=$PREVIOUS_PRODUCTION_TASK_DEFINITION" >> $GITHUB_ENV
                echo "TASK_DEFINITION_LOCAL=${{ steps.deploy-local-task-definition.outputs.previous-task-definition-arn }}" >> $GITHUB_ENV
                echo "TASK_DEFINITION_PREFLIGHT=${{ steps.deploy-preflight-task-definition-and-run-task.outputs.previous-task-definition-arn }}" >> $GITHUB_ENV
                echo "fail-pipeline=false" >> $GITHUB_OUTPUT
              fi
        else
            echo "TASK_DEFINITION_PRODUCTION=$LATEST_PRODUCTION_TASK_DEFINITION" >> $GITHUB_ENV
            echo "TASK_DEFINITION_LOCAL=${{ steps.deploy-local-task-definition.outputs.latest-task-definition-arn }}" >> $GITHUB_ENV
            echo "TASK_DEFINITION_PREFLIGHT=${{ steps.deploy-preflight-task-definition-and-run-task.outputs.latest-task-definition-arn }}" >> $GITHUB_ENV
            echo "fail-pipeline=true" >> $GITHUB_OUTPUT
        fi

    - name: Deregister production task definition
      if: ${{ always() && steps.deploy-production-task-definition.outcome == 'success' && env.TASK_DEFINITION_PRODUCTION != '' }}
      shell: bash
      run: aws ecs deregister-task-definition --task-definition "$TASK_DEFINITION_PRODUCTION"

    - name: Deregister local task definition
      if: ${{ always() && steps.deploy-local-task-definition.outcome == 'success' && env.TASK_DEFINITION_LOCAL != '' }}
      shell: bash
      run: aws ecs deregister-task-definition --task-definition "$TASK_DEFINITION_LOCAL"

    - name: Deregister preflight task definition
      if: ${{ always() && env.TASK_DEFINITION_PREFLIGHT != '' }}
      shell: bash
      run: aws ecs deregister-task-definition --task-definition "$TASK_DEFINITION_PREFLIGHT"

    - name: Fail pipeline
      if: ${{ always() && steps.determine-task-definitions-to-deregister.outputs.fail-pipeline == 'true'  }}
      shell: bash
      run: |
        echo "::error::Deployment failed; rollback triggered"
        exit 1
