name: "AWS ECS Task Deploy"
description: "Deploy production image to AWS ECS"
inputs:
  environment:
    description: Deployment environment
    required: true
  ecr_repository:
    description: ECR repository to pull image from
    required: true

  aws_access_key_id:
    description: AWS access key
    required: true
  aws_secret_access_key:
    description: AWS secret access key
    required: true
  aws_region:
    description: AWS region
    required: true

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v4

    - id: configure-aws-credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}

    - id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2

    - name: Setup Python + Poetry
      uses: moneymeets/action-setup-python-poetry@master
      with:
        working_directory: ${{ github.action_path }}
        with_checks: 'false'
        # ToDo: Re-enable cache when https://github.com/actions/setup-python/issues/361 is fixed
        poetry_cache_enabled: 'false'

    - id: get-image-uri
      uses: moneymeets/action-ecs-deploy/custom-deploy-steps/get-image-uri@master
      with:
        ecr_repository: ${{ inputs.ecr_repository }}
        aws_region: ${{ inputs.aws_region }}

    - name: Render and deploy local-exec task definition to Amazon ECS
      id: deploy-local-task-definition
      uses: moneymeets/action-ecs-deploy/custom-deploy-steps/create-task-definition@master
      with:
        application_id: ${{ inputs.ecr_repository }}-local-exec-${{ inputs.environment }}
        image_uri: ${{ steps.get-image-uri.outputs.image-uri }}
        aws_access_key_id: ${{ inputs.aws_access_key_id }}
        aws_secret_access_key: ${{ inputs.aws_secret_access_key }}
        aws_region: ${{ inputs.aws_region }}

    - name: Render and deploy task definition to Amazon ECS
      id: deploy-task-definition
      uses: moneymeets/action-ecs-deploy/custom-deploy-steps/create-task-definition@master
      with:
        application_id: ${{ inputs.ecr_repository }}-${{ inputs.environment }}
        image_uri: ${{ steps.get-image-uri.outputs.image-uri }}
        aws_access_key_id: ${{ inputs.aws_access_key_id }}
        aws_secret_access_key: ${{ inputs.aws_secret_access_key }}
        aws_region: ${{ inputs.aws_region }}

    # Service is managed by Pulumi, only desired count and task definition should be updated here
    - name: Update service
      shell: bash
      run: |
        aws ecs update-service \
          --health-check-grace-period-seconds 900 \
          --task-definition "${{ steps.deploy-task-definition.outputs.latest-task-definition-arn }}" \
          --cluster ${{ inputs.environment }} \
          --service ${{ inputs.ecr_repository }}-${{ inputs.environment }} \
          --desired-count 1 \
          --region ${{ inputs.aws_region }}

    - name: Await service stability
      shell: bash
      # ToDo: MD-7199 Re-evaluate logic after deployment failures are correctly handled by ECS
      id: check-service-stability
      run: |
        aws ecs wait services-stable \
          --cluster ${{ inputs.environment }} \
          --service ${{ inputs.ecr_repository }}-${{ inputs.environment }} \
          --region ${{ inputs.aws_region }}

    - name: Deregister previous local-exec task definition
      if: ${{ always() && steps.deploy-local-task-definition.outputs.previous-task-definition-arn != '' }}
      shell: bash
      run: |
        if [ "${{ steps.check-service-stability.outcome }}" == 'success' ]; then
            TASK_DEFINITION_TO_DEREGISTER="${{ steps.deploy-local-task-definition.outputs.previous-task-definition-arn }}"
        else
            TASK_DEFINITION_TO_DEREGISTER="${{ steps.deploy-local-task-definition.outputs.latest-task-definition-arn }}"
        fi
        aws ecs deregister-task-definition \
          --task-definition "$TASK_DEFINITION_TO_DEREGISTER" \
          --region ${{ inputs.aws_region }}

    - name: Deregister previous task definition
      if: ${{ always() && steps.deploy-task-definition.outputs.previous-task-definition-arn != '' }}
      shell: bash
      run: |
        if [ "${{ steps.check-service-stability.outcome }}" == 'success' ]; then
            TASK_DEFINITION_TO_DEREGISTER="${{ steps.deploy-task-definition.outputs.previous-task-definition-arn }}"
        else
            TASK_DEFINITION_TO_DEREGISTER="${{ steps.deploy-task-definition.outputs.latest-task-definition-arn }}"
        fi
        aws ecs deregister-task-definition \
          --task-definition "$TASK_DEFINITION_TO_DEREGISTER" \
          --region ${{ inputs.aws_region }}
