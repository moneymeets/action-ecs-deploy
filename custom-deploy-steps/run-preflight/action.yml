name: Run preflight
description: Deploy preflight task definition and run task

inputs:
  working_directory:
    description: Action working directory
    required: true
  ecr_repository:
    description: ECR repository to pull image from
    required: true
  environment:
    description: Deployment environment
    required: true
  image_uri:
    description: The URI of the container image to insert into the ECS task definition
    required: true
  deployment_tag:
    description: Github Actions deployment tag
    required: true

  aws_access_key_id:
    description: AWS access key
    required: true
  aws_secret_access_key:
    description: AWS secret access key
    required: true
  aws_region:
    description: AWS region
    required: true

outputs:
  preflight-task-arn:
    description: Preflight task ARN
    value: ${{ steps.run-preflight.outputs.preflight-task-arn }}
  previous-task-definition-arn:
    description: ARN of previous task definition revision
    value: ${{ steps.deploy-preflight-task-definition.outputs.previous-task-definition-arn }}
  latest-task-definition-arn:
    description: ARN of new task definition revision
    value: ${{ steps.deploy-preflight-task-definition.outputs.task-definition-arn }}

runs:
  using: composite
  steps:
    - name: Render and deploy preflight task definition to Amazon ECS
      id: deploy-preflight-task-definition
      uses: moneymeets/action-ecs-deploy/custom-deploy-steps/create-task-definition@master
      with:
        working_directory: ${{ inputs.working_directory }}
        application_id: ${{ inputs.ecr_repository }}-preflight-${{ inputs.environment }}
        image_uri: ${{ inputs.image_uri }}
        deployment_tag: ${{ inputs.deployment_tag }}
        aws_access_key_id: ${{ inputs.aws_access_key_id }}
        aws_secret_access_key: ${{ inputs.aws_secret_access_key }}
        aws_region: ${{ inputs.aws_region }}

    - name: Run preflight
      id: run-preflight
      shell: bash
      run: |
        NETWORK_CONFIG=$(
          aws ecs describe-services \
            --cluster ${{ inputs.environment }} \
            --services ${{ inputs.ecr_repository }}-${{ inputs.environment }} \
            | jq -r '.services[0] | .networkConfiguration.awsvpcConfiguration'
        )

        SUBNET=$(echo $NETWORK_CONFIG | jq -r '.subnets')
        SECURITY_GROUPS=$(echo $NETWORK_CONFIG | jq -r '.securityGroups')

        PREFLIGHT_TASK_ARN=$(
          aws ecs run-task \
            --cluster ${{ inputs.environment }} \
            --count 1 \
            --launch-type "FARGATE" \
            --network-configuration "{ \"awsvpcConfiguration\": { \"subnets\": $SUBNET, \"securityGroups\": $SECURITY_GROUPS, \"assignPublicIp\": \"DISABLED\" } }" \
            --task-definition "${{ steps.deploy-preflight-task-definition.outputs.latest-task-definition-arn }}" \
            | jq -r '.tasks[0] | .taskArn'
        )

        echo "preflight-task-arn=$PREFLIGHT_TASK_ARN" >> $GITHUB_OUTPUT

    - name: Wait for preflight to finish
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        poetry run actions_helper wait-for-task-stopped \
          --cluster ${{ inputs.environment }} \
          --task "${{ steps.run-preflight.outputs.preflight-task-arn }}"

    - name: Determine preflight task state
      shell: bash
      working-directory: ${{ github.action_path }}
      run: |
        PREFLIGHT_TASK_STATE=$(
           aws ecs describe-tasks \
              --cluster ${{ inputs.environment }} \
              --tasks "${{ steps.run-preflight.outputs.preflight-task-arn }}"
         )

        STOPPED_PREFLIGHT_CONTAINER=$(echo $PREFLIGHT_TASK_STATE | jq -r '.tasks[0].containers[0]')
        EXIT_CODE=$(echo $STOPPED_PREFLIGHT_CONTAINER | jq -r '.exitCode')
        REASON=$(echo $STOPPED_PREFLIGHT_CONTAINER | jq -r '.reason')

        if [ "$EXIT_CODE" -ne 0 ]; then
            echo "Error: Preflight container failed with a non zero exit code - $EXIT_CODE";
            echo "Reason: $REASON";
            exit 1;
        fi
